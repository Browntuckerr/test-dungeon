{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","dimensions","maxTunnels","maxLength","onClick","bind","onChange","num","array","i","push","d","e","this","setState","target","name","validator","value","x","input","Number","isNaN","randomDirection","map","createArray","currentRow","Math","floor","random","currentColumn","directions","lastDirection","length","randomLength","ceil","tunnelLength","forceUpdate","grid","generateMap","className","type","obj","row","obj2","col","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.53ae871d.chunk.js","sourcesContent":["// import logo from './logo.svg';\nimport './App.css';\nimport React, { Component } from \"react\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dimensions: 50,\n      maxTunnels: 100,\n      maxLength: 10\n    };\n    this.onClick = this.onClick.bind(this);\n    this.onChange = this.onChange.bind(this);\n  }\n\n  createArray(num, dimensions) {\n    var array = [];\n    for (var i = 0; i < dimensions; i++) {\n      array.push([]);\n      for (var d = 0; d < dimensions; d++) {\n        array[i].push(num);\n      }\n    }\n    return array;\n  }\n\n  onChange(e) {\n    this.setState({\n      [e.target.name]: this.validator(e.target.value)\n    });\n  }\n\n  validator(x) {\n    let input = Number(x);\n    if (isNaN(input)) {\n      return 0;\n    }\n    return input;\n  }\n  generateMap() {\n    let dimensions = this.state.dimensions,\n      maxTunnels = this.state.maxTunnels,\n      maxLength = this.state.maxLength,\n      map = this.createArray(1, dimensions),\n      currentRow = Math.floor(Math.random() * dimensions),\n      currentColumn = Math.floor(Math.random() * dimensions),\n      directions = [[-1, 0], [1, 0], [0, 1], [0, -1]],\n      lastDirection = [],\n      randomDirection;\n\n    while (maxTunnels && dimensions && maxLength) {\n      do {\n        randomDirection = directions[Math.floor(Math.random() * directions.length)];\n      } while ((randomDirection[0] === -lastDirection[0] && randomDirection[1]) || (randomDirection[0] === lastDirection[0] && randomDirection[1] === lastDirection[1]));\n      var randomLength = Math.ceil(Math.random() * maxLength),\n        tunnelLength = 0;\n      while (tunnelLength < randomLength) {\n        if (((currentRow === 0) && (randomDirection[0] === -1)) ||\n          ((currentColumn === 0) && (randomDirection[1] === -1)) ||\n          ((currentRow === dimensions - 1) && (randomDirection[0] === 1)) ||\n          ((currentColumn === dimensions - 1) && (randomDirection[1] === 1))) {\n          break;\n        } else {\n          map[currentRow][currentColumn] = 0;\n          currentRow += randomDirection[0];\n          currentColumn += randomDirection[1];\n          tunnelLength++;\n        }\n      }\n      if (tunnelLength) {\n        lastDirection = randomDirection;\n        maxTunnels--;\n      }\n    }\n    return map;\n  };\n  onClick(e) {\n    this.forceUpdate()\n  }\n  render() {\n    let grid = this.generateMap();\n    return (\n      <div >\n        <div className=\"form-group row text-center\">\n          <div className=\"inline\">\n            <label>dimensions</label>\n            <input className=\"form-control\" name=\"dimensions\" type=\"text\" maxLength=\"2\" value={this.state.dimensions} onChange={this.onChange}/>\n          </div>\n          <div className=\"inline\">\n            <label>maxTunnels</label>\n            <input className=\"form-control\" name=\"maxTunnels\" type=\"text\" maxLength=\"3\" value={this.state.maxTunnels} onChange={this.onChange}/>\n          </div>\n          <div className=\"inline\">\n            <label>maxLength</label>\n            <input className=\"form-control\" name=\"maxLength\" type=\"text\" maxLength=\"3\" value={this.state.maxLength} onChange={this.onChange}/>\n          </div>\n        </div>\n        <table className=\"grid\" onClick={this.onClick}>\n          <thead>\n            {grid.map((obj, row) => <tr key={row}>{obj.map((obj2, col) =>< td className = {\n                obj2 === 1\n                  ? 'wall'\n                  : 'tunnel'\n              }\n              key = {\n                col\n              } > </td>)}</tr>)}\n          </thead>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}